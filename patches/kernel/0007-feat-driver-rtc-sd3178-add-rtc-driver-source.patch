From 145cd928849ce13bf6623c1eaef9834b6f85237a Mon Sep 17 00:00:00 2001
From: yuji <yujibuzailai_sun@outlook.com>
Date: Thu, 5 Jun 2025 09:32:22 +0800
Subject: [PATCH] feat(driver/rtc-sd3178) add rtc driver source

---
 .../dts/rockchip/rk3568-atk-atompi-ca1.dts    |   5 +
 arch/arm64/configs/rockchip_linux_defconfig   |   3 +-
 drivers/misc/dlpc3430.c                       |   8 +-
 drivers/rtc/Kconfig                           |   7 +
 drivers/rtc/Makefile                          |   1 +
 drivers/rtc/rtc-sd3178.c                      | 158 ++++++++++++++++++
 6 files changed, 177 insertions(+), 5 deletions(-)
 create mode 100644 drivers/rtc/rtc-sd3178.c

diff --git a/arch/arm64/boot/dts/rockchip/rk3568-atk-atompi-ca1.dts b/arch/arm64/boot/dts/rockchip/rk3568-atk-atompi-ca1.dts
index cb77cde3b..218820ca2 100644
--- a/arch/arm64/boot/dts/rockchip/rk3568-atk-atompi-ca1.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3568-atk-atompi-ca1.dts
@@ -506,6 +506,11 @@
 		// vddio-supply = <&vddio>;
 	};
 
+    sd3178@68 {
+        compatible = "whwave,sd3178";
+        reg = <0x32>;
+    };
+
 /*
 	dsi_touch: gt911@14 {
 		compatible = "goodix,gt9xx";
diff --git a/arch/arm64/configs/rockchip_linux_defconfig b/arch/arm64/configs/rockchip_linux_defconfig
index 490833482..29d2c7186 100644
--- a/arch/arm64/configs/rockchip_linux_defconfig
+++ b/arch/arm64/configs/rockchip_linux_defconfig
@@ -124,7 +124,7 @@ CONFIG_BLK_DEV_LOOP=y
 CONFIG_BLK_DEV_RAM=y
 CONFIG_BLK_DEV_RAM_COUNT=1
 CONFIG_SRAM=y
-CONFIG_DLPC3430=m
+CONFIG_DLPC3430=y
 CONFIG_BLK_DEV_SD=y
 CONFIG_BLK_DEV_SR=y
 CONFIG_SCSI_SCAN_ASYNC=y
@@ -456,6 +456,7 @@ CONFIG_RTC_CLASS=y
 CONFIG_RTC_DRV_HYM8563=y
 CONFIG_RTC_DRV_RK808=y
 CONFIG_RTC_DRV_PCF8563=y
+CONFIG_RTC_DRV_SD3178=y
 CONFIG_DMADEVICES=y
 CONFIG_PL330_DMA=y
 CONFIG_STAGING=y
diff --git a/drivers/misc/dlpc3430.c b/drivers/misc/dlpc3430.c
index 87ee8c3d0..f7a4cc1ce 100644
--- a/drivers/misc/dlpc3430.c
+++ b/drivers/misc/dlpc3430.c
@@ -53,13 +53,13 @@ static void dlpc3430_hw_on(struct dlpc3430_data *data)
     gpiod_set_value_cansleep(data->proj_on_gpio, 1);
     msleep(2000);
 
-    i2c_master_send(data->client, cmd, 2);
+    dlpc3430_write(data->client, cmd, 2);
 }
 
 static void dlpc3430_hw_off(struct dlpc3430_data *data)
 {
     u8 cmd[2] = { 0x52, 0x00 };
-    i2c_master_send(data->client, cmd, 2);
+    dlpc3430_write(data->client, cmd, 2);
 
     gpiod_set_value_cansleep(data->proj_on_gpio, 0);
 }
@@ -90,7 +90,7 @@ static int dlpc3430_reg_init(struct i2c_client *client)
     int ret;
     int i;
     struct {
-        const u8 *data;
+        u8 *data;
         size_t len;
     } seqs[] = {
         { (u8[]){0x16, 0x01}, 2 },
@@ -108,7 +108,7 @@ static int dlpc3430_reg_init(struct i2c_client *client)
     };
 
     for (i = 0; i < ARRAY_SIZE(seqs); i++) {
-        ret = i2c_master_send(client, seqs[i].data, seqs[i].len);
+        ret = dlpc3430_write(client, seqs[i].data, seqs[i].len);
         if (ret < 0) {
             dev_err(&client->dev, "I2C reg_init failed at step %d, ret=%d\n", i, ret);
             return ret;
diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index d9646ce40..612adecb4 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -1845,4 +1845,11 @@ config RTC_DRV_GOLDFISH
 	  Goldfish is a code name for the virtual platform developed by Google
 	  for Android emulation.
 
+config RTC_DRV_SD3178
+	tristate "SD3178 RTC support"
+	depends on I2C
+	help
+	  If you say yes here you get support for SD3178 RTC chip via I2C.
+
+
 endif # RTC_CLASS
diff --git a/drivers/rtc/Makefile b/drivers/rtc/Makefile
index 45e146abc..66ff583bd 100644
--- a/drivers/rtc/Makefile
+++ b/drivers/rtc/Makefile
@@ -179,3 +179,4 @@ obj-$(CONFIG_RTC_DRV_X1205)	+= rtc-x1205.o
 obj-$(CONFIG_RTC_DRV_XGENE)	+= rtc-xgene.o
 obj-$(CONFIG_RTC_DRV_ZYNQMP)	+= rtc-zynqmp.o
 obj-$(CONFIG_RTC_DRV_GOLDFISH)	+= rtc-goldfish.o
+obj-$(CONFIG_RTC_DRV_SD3178)	+= rtc-sd3178.o
diff --git a/drivers/rtc/rtc-sd3178.c b/drivers/rtc/rtc-sd3178.c
new file mode 100644
index 000000000..fef2bf9af
--- /dev/null
+++ b/drivers/rtc/rtc-sd3178.c
@@ -0,0 +1,158 @@
+// SPDX-License-Identifier: GPL-2.0
+
+
+#include<linux/module.h>
+#include<linux/i2c.h>
+#include<linux/rtc.h>
+#include<linux/bcd.h>
+
+
+#define SD3178_REG_SECONDS      0x00
+#define SD3178_REG_ALARM_SEC    0x07
+#define SD3178_REG_ALARM_MIN    0x08
+#define SD3178_REG_ALARM_HOUR   0x09
+#define SD3178_REG_ALARM_EN     0x0E
+#define SD3178_REG_CTRL1        0x0F
+#define SD3178_REG_CTRL2        0x10
+#define SD3178_REG_CTRL3        0x11
+
+
+struct sd3178_rtc {
+    struct i2c_client *client;
+    struct rtc_device *rtc;
+};
+
+static int sd3178_read_time(struct device *dev, struct rtc_time *tm)
+{
+    u8 buf[7];
+	int ret;
+	struct sd3178_rtc *chip = dev_get_drvdata(dev);
+	struct i2c_client *client = chip->client;
+
+	ret = i2c_smbus_read_i2c_block_data(client, SD3178_REG_SECONDS, 7, buf);
+	if (ret < 0)
+		return ret;
+
+    tm->tm_sec  = bcd2bin(buf[0] & 0x7F);    // 秒（最高位保留）
+    tm->tm_min  = bcd2bin(buf[1] & 0x7F);    // 分（最高位保留）
+    tm->tm_hour = bcd2bin(buf[2] & 0x3F);    // 小时（使用 24 小时制）
+    tm->tm_wday = bcd2bin(buf[3] & 0x07);             // 星期（0～6）
+    tm->tm_mday = bcd2bin(buf[4] & 0x3F);    // 日（1～31）
+    tm->tm_mon  = bcd2bin(buf[5] & 0x1F) - 1;// 月（1～12）→ Linux 使用 0～11
+    tm->tm_year = bcd2bin(buf[6]) + 100;     // 年（0～99）→ Linux 以 1900 为基准，所以 +100 = 2000 年起
+
+
+	return 0;
+}
+
+static int sd3178_set_time(struct device *dev, struct rtc_time *tm)
+{
+    u8 buf[8];
+	int ret;
+	struct sd3178_rtc *chip = dev_get_drvdata(dev);
+	struct i2c_client *client = chip->client;
+
+	/* Enable write sequence: WRTC1 -> WRTC2 -> WRTC3 */
+	i2c_smbus_write_byte_data(client, SD3178_REG_CTRL2, 0x01);
+	i2c_smbus_write_byte_data(client, SD3178_REG_CTRL1, 0x01);
+	i2c_smbus_write_byte_data(client, SD3178_REG_CTRL3, 0x01);
+
+	buf[0] = SD3178_REG_SECONDS;
+	buf[1] = bin2bcd(tm->tm_sec);
+	buf[2] = bin2bcd(tm->tm_min);
+	buf[3] = bin2bcd(tm->tm_hour);
+	buf[4] = bcd2bin(tm->tm_wday & 0x07);
+	buf[5] = bin2bcd(tm->tm_mday);
+	buf[6] = bin2bcd(tm->tm_mon + 1);
+	buf[7] = bin2bcd(tm->tm_year - 100);
+
+	ret = i2c_smbus_write_i2c_block_data(client, buf[0], 7, &buf[1]);
+	return ret < 0 ? ret : 0;
+}
+
+static int sd3178_read_alarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+    u8 sec, min, hour, en;
+	//int ret;
+	struct sd3178_rtc *chip = dev_get_drvdata(dev);
+	struct i2c_client *client = chip->client;
+
+	sec = i2c_smbus_read_byte_data(client, SD3178_REG_ALARM_SEC);
+	min = i2c_smbus_read_byte_data(client, SD3178_REG_ALARM_MIN);
+	hour = i2c_smbus_read_byte_data(client, SD3178_REG_ALARM_HOUR);
+	en = i2c_smbus_read_byte_data(client, SD3178_REG_ALARM_EN);
+
+	alrm->time.tm_sec  = bcd2bin(sec & 0x7F);
+	alrm->time.tm_min  = bcd2bin(min & 0x7F);
+	alrm->time.tm_hour = bcd2bin(hour & 0x3F);
+	alrm->enabled = !!(en & 0x01);
+	return 0;
+}
+
+static int sd3178_set_alarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+    u8 sec, min, hour;
+	struct sd3178_rtc *chip = dev_get_drvdata(dev);
+	struct i2c_client *client = chip->client;
+
+	sec = bin2bcd(alrm->time.tm_sec) & 0x7F;
+	min = bin2bcd(alrm->time.tm_min) & 0x7F;
+	hour = bin2bcd(alrm->time.tm_hour) & 0x3F;
+
+	i2c_smbus_write_byte_data(client, SD3178_REG_ALARM_SEC, sec);
+	i2c_smbus_write_byte_data(client, SD3178_REG_ALARM_MIN, min);
+	i2c_smbus_write_byte_data(client, SD3178_REG_ALARM_HOUR, hour);
+	i2c_smbus_write_byte_data(client, SD3178_REG_ALARM_EN, alrm->enabled ? 0x01 : 0x00);
+
+	return 0;
+}
+
+static const struct rtc_class_ops sd3178_rtc_ops = {
+    .read_time = sd3178_read_time,
+    .set_time = sd3178_set_time,
+    .read_alarm = sd3178_read_alarm,
+    .set_alarm = sd3178_set_alarm,
+};
+
+static int sd3178_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct sd3178_rtc *chip;
+
+	chip = devm_kzalloc(&client->dev, sizeof(*chip), GFP_KERNEL);
+	if (!chip)
+		return -ENOMEM;
+
+	chip->client = client;
+	i2c_set_clientdata(client, chip);
+
+	chip->rtc = devm_rtc_device_register(&client->dev,
+		client->name, &sd3178_rtc_ops, THIS_MODULE);
+
+	return PTR_ERR_OR_ZERO(chip->rtc);
+}
+
+static const struct i2c_device_id sd3178_id[] = {
+	{ "sd3178", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, sd3178_id);
+
+static const struct of_device_id sd3178_dt_ids[] = {
+	{ .compatible = "whwave,sd3178" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, sd3178_dt_ids);
+
+static struct i2c_driver sd3178_driver = {
+	.driver = {
+		.name = "rtc-sd3178",
+		.of_match_table = sd3178_dt_ids,
+	},
+	.probe = sd3178_probe,
+	.id_table = sd3178_id,
+};
+module_i2c_driver(sd3178_driver);
+
+MODULE_DESCRIPTION("SD3178 RTC Driver");
+MODULE_AUTHOR("Sarainco");
+MODULE_LICENSE("GPL");
\ No newline at end of file
-- 
2.25.1

